openapi: 3.0.1
info:
  title: User Account Association API
  description: |
    This document specifies a **User Account Association Management RESTful API** for **WSO2 Identity Server**.
    The APIs provide the capability for privileged users to retrieve/delete associated local/federated accounts of other users.
  version: v1
servers:
  - url: https://{serverUrl}/t/{tenantDomain}/api/users/v1
    variables:
      serverUrl:
        default: localhost:9443
      tenantDomain:
        default: carbon.super
security:
  - OAuth2: []
  - BasicAuth: []
tags:
  - name: admin
    description: |
      Operations available for privileged users, to be invoked on behalf of another user.
paths:
  /{user-id}/associations:
    get:
      tags:
        - admin
      summary: Get user's associations
      description: |
        This API is used to retrieve the associations of the user.<br>

        <b>Scope(Permission) required:</b> `internal_user_association_view`
      parameters:
        - name: user-id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        204:
          description: No content
          content: {}
        401:
          description: Unauthorized request
          content: {}
        403:
          description: Resource Forbidden
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'GET' \
            'https://localhost:9443/api/users/v1/{user-id}/associations' \
            -H 'accept: application/json' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='
    delete:
      tags:
        - admin
      summary: Delete user's all user associations
      description: |
        This API is used to delete all associations of the user.<br>

        <b>Scope(Permission) required:</b> `internal_user_association_delete`
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: No content
          content: {}
        401:
          description: Unauthorized request
          content: {}
        403:
          description: Resource Forbidden
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'DELETE' \
            'https://localhost:9443/api/users/v1/{user-id}/associations' \
            -H 'accept: */*' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='
  /{user-id}/federated-associations:
    get:
      tags:
        - admin
      summary: Get user's federated associations
      description: |
        This API is used to retrieve the federated associations of the user.<br>
        
        <b>Scope(Permission) required:</b> `internal_user_association_view`
      parameters:
        - name: user-id
          in: path
          description: user id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FederatedAssociation'
        204:
          description: No content
          content: {}
        401:
          description: Unauthorized request
          content: {}
        403:
          description: Resource Forbidden
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'GET' \
            'https://localhost:9443/api/users/v1/{user-id}/federated-associations' \
            -H 'accept: application/json' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='
    post:
      tags:
        - admin
      summary: Create federated user association
      description: |
        This API allows administrators to explicitly associate a local user with a federated identity. <br>
          <b>Scope(Permission) required:</b> `internal_user_association_create`
      parameters:
        - name: user-id
          in: path
          required: true
          description: user id
          type: string
        - name: association
          in: body
          description: User details to be associated.
          required: true
          schema:
            $ref: '#/definitions/FederatedAssociationRequest'
      responses:
        201:
          description: Successfully created
          schema:
            $ref: '#/definitions/FederatedAssociation'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Resource Forbidden
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'POST' \
            'https://localhost:9443/api/users/v1/{user-id}/federated-associations' \
            -H 'accept: application/json' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
            -H 'Content-Type: application/json' \
            -d '{
              "idp": "exampleIdP",
              "federatedUserId": "john@example.com"
            }'
    delete:
      tags:
        - admin
      summary: Delete user's all user-federated associations
      description: |
        This API is used to delete all federated associations of the user.<br>
        
        <b>Scope(Permission) required:</b> `internal_user_association_delete`
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: No content
          content: {}
        401:
          description: Unauthorized request
          content: {}
        403:
          description: Resource Forbidden
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'DELETE' \
            'https://localhost:9443/api/users/v1/{user-id}/federated-associations' \
            -H 'accept: */*' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='
  /{user-id}/federated-associations/{id}:
    delete:
      tags:
        - admin
      summary: Delete the user's federated association
      description: |
        This API is used to delete a federated association of the user.<br>
        
        <b>Scope(Permission) required:</b> `internal_user_association_delete`
      parameters:
        - name: user-id
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: No content
          content: {}
        401:
          description: Unauthorized request
          content: {}
        403:
          description: Resource Forbidden
          content: {}
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'DELETE' \
            'https://localhost:9443/api/users/v1/user-id/federated-associations/federated-association-id' \
            -H 'accept: */*' \
            -H 'Authorization: Basic YWRtaW46YWRtaW4='
  /federated-associations/bulk:
    post:
      tags:
        - admin
      summary: Create and Delete users associations in bulk
      description: |
        This API is used to create and delete users association in bulk. <br>
        Maximum number of supported operations in a single request is 1000 by default.
        It can be configured using a server level configuration.
        <b>Scope required:</b>
          * internal_user_fed_association_bulk
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkFederatedAssociationRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkFederatedAssociationResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codeSamples:
        - lang: Curl
          source: |
            curl -X 'POST' \
              'https://localhost:9443/api/users/v1/federated-associations/bulk' \
              -H 'accept: */*' \
              -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
              -H 'Content-Type: application/json' \
              -d '{
                "failOnErrors": 0,
                "operations": [
                  {
                    "method": "POST",
                    "bulkId": "qewvaewv",
                    "path": "/1ca49238-3ab0-474b-9d42-8067780a503c/federated-associations",
                    "data": {
                      "idp": "Google",
                      "federatedUserId": "sam@gmail.com"
                    }
                  },
                  {
                    "method": "POST",
                    "bulkId": "fgnruyt",
                    "path": "/7589bffc-b315-4dbd-83a5-86f5b8aa4776/federated-associations",
                    "data": {
                      "idp": "Google",
                      "federatedUserId": "mike@gmail.com"
                    }
                  },
                  {
                    "method": "DELETE",
                    "bulkId": "useffger",
                    "path": "/0a2d94e2-3b98-49ea-89d6-e8dd9e0ff89b/federated-associations"
                  },
                  {
                    "method": "DELETE",
                    "bulkId": "eefvrtgnrtn",
                    "path": "/197fc0fa-c2b0-48e6-92a6-a551afc3d125/federated-associations/0dcc3f5a-3bee-4f36-a91f-8ee60dbae875"
                  }
                ]
              }'
components:
  schemas:
    Error:
      required:
        - code
        - message
      type: object
      properties:
        code:
          type: string
          example: some_error_code
        message:
          type: string
          example: Some Error Message
        description:
          type: string
          example: Some Error Description
        traceId:
          type: string
          example: Some Correlation for Error Instance
    User:
      type: object
      properties:
        userId:
          type: string
          example: 23e22434234234329jj9iin
        username:
          type: string
          example: john
        userStoreDomain:
          type: string
          example: PRIMARY
        tenantDomain:
          type: string
          example: carbon.super
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: doe
        email:
          type: string
          example: john.doe@wso2.com
    FederatedAssociation:
      type: object
      properties:
        id:
          type: string
          example: eeqweisfhkdfik
        idp:
          $ref: '#/components/schemas/Idp'
        federatedUserId:
          type: string
          example: john@google.com
    Idp:
      type: object
      properties:
        id:
          type: string
          example: eeqweisfhkdfikaefcqwesfceqwqas
        name:
          type: string
          example: google.com
        displayName:
          type: string
          example: Google
        imageUrl:
          type: string
          example: https://is.example.com/sample.jpg
    Property:
      type: object
      properties:
        key:
          type: string
          example: test-key
        value:
          type: string
          example: test-value
    AssociationUserRequest:
      type: object
      properties:
        userId:
          type: string
          example: john
        password:
          type: string
          example: userpassword
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
    FederatedAssociationRequest:
      type: object
      properties:
        idp:
          type: string
          example: exampleIdP
          description: Name of the IdP
        federatedUserId:
          type: string
          example: john@example.com
          description: User identifier in the federated IdP
    BulkFederatedAssociationRequest:
      type: object
      properties:
        failOnErrors:
          type: integer
          example: 1
          description: |
            This represents whether the API should stop processing the operations if any of them fail. The subsequent
            operations after the the fail count is reached will not be processed.
            If set to 0 or not set, the API will continue processing the operations even if some of them fail.
        operations:
          type: array
          items:
            $ref: '#/components/schemas/BulkFederatedAssociationOperation'

    BulkFederatedAssociationOperation:
      type: object
      required:
        - method
        - bulkId
        - path
      properties:
        method:
          type: string
          enum:
            - POST
            - DELETE
          example: POST
          description: |
            HTTP method to be used for the operation. Supported methods are POST and, DELETE. These values
            If the method is not specified, the operation will be treated as a bad request.
        bulkId:
          type: string
          example: "ytrewq"
        path:
          type: string
          example: "/b1781d25-bde5-460a-a58a-8fe8dbfd8487/federated-associations"
          description: |
            The path to the resource to be operated on. The path should be relative to the base path of the API.
            Full path for a federated association operation would be
            `/t/{tenant-domain}/api/users/v1/{user-id}/federated-associations/{association-id}`.
        data:
          $ref: '#/components/schemas/UserFederatedAssociationData'

    UserFederatedAssociationData:
      type: object
      properties:
        idp:
          type: string
          example: "exampleIdP"
          description: Name of the IdP
        federatedUserId:
          type: string
          example: "john@example.com"
          description: User identifier in the federated IdP

    BulkFederatedAssociationResponse:
      type: object
      properties:
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/BulkAssociationOperationResponse'

    BulkAssociationOperationResponse:
      type: object
      properties:
        bulkId:
          type: string
          example: "qwerty"
        status:
          type: object
          properties:
            statusCode:
              type: integer
              example: "400"
            errorCode:
              type: string
              example: "UAA-10012"
            errorMessage:
              type: string
              example: "Error while adding federated user association: 1890c6c0-d1a0-4eb4-8075-320756d75946"
            errorDescription:
              type: string
              example: "The federated association is already associated to a local user"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://localhost:9443/oauth2/authorize
          tokenUrl: https://localhost:9443/oauth2/token
          scopes: {}
