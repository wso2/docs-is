openapi: 3.0.1
info:
  title: SCIM 2.0 Endpoint Swagger Definition
  description: |
    SCIM 2.0 endpoints
  contact:
    name: WSO2 Identity Server Team
    url: http://wso2.com
    email: architecture@wso2.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: 1.0.0
servers:
- url: https://{serverUrl}/t/{tenantDomain}/scim2
  variables:
    serverUrl:
      default: localhost:9443
    tenantDomain:
      default: carbon.super
security:
- OAuth2: []
- BasicAuth: []
paths:
  /Me:
    get:
      tags:
      - Me Endpoint
      summary: Get Me
      description: "This API returns the user details of the currently authenticated\
        \ user.\n\n  <b>Permission required:</b>\n    * /permission/admin/login\n\
        \  \n  <b>Scope required:</b>\n    * internal_login\n"
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      responses:
        200:
          description: Valid user is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
    put:
      tags:
      - Me Endpoint
      summary: Update Me
      description: "This API uses a PUT operation to update user details.\n\n  <b>Permission\
        \ required:</b>\n  * /permission/admin/login\n  \n  <b>Scope required:</b>\n\
        \    * internal_login\n"
      operationId: updateUserMe
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/UserUpdateObject'
        required: true
      responses:
        200:
          description: User is updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
      x-codegen-request-body-name: body
    post:
      tags:
      - Me Endpoint
      summary: Create Me
      description: "This API is used to register a user anonymously.\n\n <b>Permission\
        \ required:</b>\n    * /permission/admin/manage/identity/usermgt/create\n\
        \    \n <b>Scope required:</b>\n    * internal_user_mgt_create\n"
      operationId: createUserMe
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        description: User details to add.
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/UserObject'
        required: true
      responses:
        201:
          description: User is created.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        400:
          description: Invalid Input
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidInput'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        500:
          description: Internal Server Error
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Me Endpoint
      summary: Delete Me
      description: "This API is used to delete the currently authenticated user.\n\
        \n  <b>Permission required:</b>\n   * /permission/admin/manage/identity/usermgt/delete\n\
        \   \n   <b>Scope required:</b>\n    * internal_user_mgt_delete\n"
      operationId: deleteUserMe
      responses:
        204:
          description: User is deleted
          content: {}
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        501:
          description: Self delete is not suported
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorNotimplemented'
    patch:
      tags:
      - Me Endpoint
      summary: Update Me - PATCH
      description: "This API uses a PATCH operation to update user details.\n\n  <b>Permission\
        \ required:</b>\n   * /permission/admin/login\n   \n   <b>Scope required:</b>\n\
        \    * internal_login\n \n"
      operationId: patchUserMe
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOpperationInput'
        required: false
      responses:
        200:
          description: User is updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/PatchOperationResponseOutput'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
      x-codegen-request-body-name: body
  /Groups:
    get:
      tags:
      - Groups Endpoint
      summary: Filter Groups
      description: "This API returns groups according to the specified filter, sort,\
        \ and pagination parameters.\n\n  <b>Permission required:</b>\n  * / permission/admin/manage/identity/rolemgt/view\n\
        \  \n  <b>Scope required:</b>\n    * internal_role_mgt_view\n"
      operationId: getGroup
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      - name: filter
        in: query
        description: Filter expression for filtering
        schema:
          type: string
      - name: startIndex
        in: query
        description: The 1-based index of the first query result
        schema:
          type: integer
          format: int32
      - name: count
        in: query
        description: Specifies the desired maximum number of query results per page.
        schema:
          type: integer
          format: int32
      - name: domain
        in: query
        description: The name of the user store where filtering needs to be applied.
        schema:
          type: string
      responses:
        200:
          description: Valid groups are found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/GroupsListResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    post:
      tags:
      - Groups Endpoint
      summary: Create Group
      description: "This API creates a group and returns the details of the created\
        \ group including its unique ID.\n\n<b>Permission required:</b>\n* /permission/admin/manage/identity/rolemgt/create\n\
        \n<b>Scope required:</b>\n    * internal_role_mgt_create\n    \n"
      operationId: createGroup
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/GroupRequestObject'
        required: false
      responses:
        201:
          description: Valid group is created
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/GroupResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        409:
          description: Group already exist
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErroGroupAlreadyAvailable'
      x-codegen-request-body-name: body
  /Groups/.search:
    post:
      tags:
      - Groups Endpoint
      summary: Search Groups
      description: "This API returns groups according to the specified filter, sort,\
        \ and pagination parameters.\n\n<b>Permission required:</b>\n* /permission/admin/manage/identity/rolemgt/view\n\
        \n<b>Scope required:</b>\n    * internal_role_mgt_view\n    \n"
      operationId: getGroupsByPost
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/GroupSearchRequestObject'
        required: false
      responses:
        200:
          description: Valid groups are found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/GroupSearchResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
  /Groups/{id}:
    get:
      tags:
      - Groups Endpoint
      summary: Get Group by ID
      description: "This API returns the group details of a particular group using\
        \ its unique ID.\n\n<b>Permission required:</b>\n* /permission/admin/manage/identity/rolemgt/view\n\
        \n<b>Scope required:</b>\n    * internal_role_mgt_view\n    \n"
      operationId: getGroup by id
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      responses:
        200:
          description: Valid group is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/GroupResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    put:
      tags:
      - Groups Endpoint
      summary: Update Group - PUT
      description: "This API updates the group details and returns the updated group\
        \ details using a PUT operation.\n\n<b>Permission required:</b>\n* /permission/admin/manage/identity/rolemgt/update\n\
        \n<b>Scope required:</b>\n    * internal_role_mgt_update\n    \n"
      operationId: updateGroup
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/GroupPutRequestObject'
        required: false
      responses:
        200:
          description: Group is updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/GroupPutResponseObject'
        400:
          description: Invalid Input
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidInput'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Groups Endpoint
      summary: Delete Group
      description: "This API deletes a particular group using its unique ID.\n\n<b>Permission\
        \ required:</b>\n* /permission/admin/manage/identity/rolemgt/delete\n\n<b>Scope\
        \ required:</b>\n    * internal_role_mgt_delete\n    \n"
      operationId: deleteGroup
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Group is deleted
          content: {}
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    patch:
      tags:
      - Groups Endpoint
      summary: Update Group - PATCH
      description: |
        This API updates the group details and returns the updated group details using a PATCH operation.

        <b>Permission required:</b>
        * /permission/admin/manage/identity/rolemgt/update

        <b>Scope required:</b>
            * internal_role_mgt_update
      operationId: patchGroup
      parameters:
      - name: id
        in: path
        description: Unique id of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchGroupOperationRequestObject'
        required: false
      responses:
        200:
          description: Group is updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/PatchGroupOperationResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
  /Users:
    get:
      tags:
      - Users Endpoint
      summary: Filter Users
      description: "This API returns users according to the filter, sort and pagination\
        \ parameters. Pagination is not supported across user stores and LDAP multi-attribute\
        \ group filtering. However, filtering is supported across multiple user stores.\n\
        By default, duplicate user entries in the SCIM2 users response are persisted.\
        \ To remove the duplicate user entries, add the following configuration to\
        \ the deployment.toml file. </br> </br>\n\n** Note\nAccording to the SCIM\
        \ specification, the `totalResutls` attribute should return total number of\
        \ results returned by the list or query operation.  But due to the limitation\
        \ of the LDAP user store, when we use the pagination paramters, we cannot\
        \ get total number of users in the database. So, we are returning the total\
        \ number of users per page as the `totalResults`. This is only applicable\
        \ for the LDAP user store. The JDBC user store is working according to the\
        \ specification.\n\n[scim2]\nremove_duplicate_users_in_users_response = true\n\
        \n<b>Permission required:</b>\n* /permission/admin/manage/identity/usermgt/view\n\
        \n<b>Scope required:</b>\n    * internal_user_mgt_list\n    \n"
      operationId: getUser
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      - name: filter
        in: query
        description: |
          Filter expression for filtering. Supported filters are ‘Ew’, ‘Eq’, ‘Co’, ‘Sw’, ‘and’.
        schema:
          type: string
      - name: startIndex
        in: query
        description: The 1-based index of the first query result
        schema:
          type: integer
          format: int32
      - name: count
        in: query
        description: Specifies the desired maximum number of query results per page.
        schema:
          type: integer
          format: int32
      - name: domain
        in: query
        description: The name of the user store where filtering needs to be applied.
        schema:
          type: string
      responses:
        200:
          description: Valid users are found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserObjectListResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    post:
      tags:
      - Users Endpoint
      summary: Create User
      description: "This API creates a user and returns the user details along with\
        \ the user's unique ID.\n\n<b>Permission required:</b>\n* /permission/admin/manage/identity/usermgt/create\n\
        \n<b>Scope required:</b>\n    * internal_user_mgt_create\n    \n"
      operationId: createUser
      parameters:
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/UserObject'
        required: false
      responses:
        201:
          description: User is created.
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        400:
          description: Invalid Input
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidInput'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        500:
          description: Internal Server Error
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorInternalServerError'
      x-codegen-request-body-name: body
  /Users/.search:
    post:
      tags:
      - Users Endpoint
      summary: Search Users
      description: "This API returns users according to the filter, sort and pagination\
        \ parameters.\n\n <b>Permission required:</b>\n  * /permission/admin/manage/identity/usermgt/list\n\
        \  \n  <b>Scope required:</b>\n    * internal_user_mgt_list\n    \n"
      operationId: getUsersByPost
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/UserSearchRequestObject'
        required: false
      responses:
        200:
          description: Valid users are found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserObjectListResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
  /Users/{id}:
    get:
      tags:
      - Users Endpoint
      summary: Get User by ID
      description: "Return user details if a user found.\n\n<b>Permission required:</b>\n\
        * /permission/admin/manage/identity/usermgt/view\n\n<b>Scope required:</b>\n\
        \    * internal_user_mgt_list\n    \n"
      operationId: getUser by id
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      responses:
        200:
          description: Valid user is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    put:
      tags:
      - Users Endpoint
      summary: Update User - PUT
      description: "This API updates user details and returns the updated user details\
        \ using a PUT operation.\n\n <b>Permission required:</b>\n  * /permission/admin/manage/identity/usermgt/update\n\
        \  \n  <b>Scope required:</b>\n    * internal_user_mgt_update\n    \n"
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/UserUpdateObject'
        required: false
      responses:
        200:
          description: Valid user is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Users Endpoint
      summary: Delete User by ID
      description: "This API deletes a user using the user's unique ID.\n\n <b>Permission\
        \ required:</b>\n * /permission/admin/manage/identity/usermgt/delete\n \n\
        \ <b>Scope required:</b>\n    * internal_user_mgt_delete\n"
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      responses:
        204:
          description: User is deleted
          content: {}
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    patch:
      tags:
      - Users Endpoint
      summary: Update User - PATCH
      description: "This API updates user details and returns the updated user details\
        \ using a PATCH operation.\n\n <b>Permission required:</b>\n * /permission/admin/manage/identity/usermgt/update\n\
        \ \n <b>Scope required:</b>\n    * internal_user_mgt_update\n\n<b>Supported\
        \ Operations:</b>\n    * add\n    * replace\n    * remove\n    \n"
      operationId: patchUser
      parameters:
      - name: id
        in: path
        description: Unique id of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchOpperationInput'
        required: false
      responses:
        200:
          description: Valid user is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UserResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
  /Roles:
    get:
      tags:
      - Roles Endpoint
      summary: Filter Roles
      description: "This API returns roles according to the specified filter, sort,\
        \ and pagination parameters.\n\n  <b>Permission required:</b>\n    * / permission/admin/manage/identity/rolemgt/view\n\
        \    \n   <b>Scope required:</b>\n    * internal_role_mgt_view\n    \n"
      operationId: getRole
      parameters:
      - name: filter
        in: query
        description: Filter expression for filtering
        schema:
          type: string
      - name: startIndex
        in: query
        description: The 1-based index of the first query result
        schema:
          type: integer
          format: int32
      - name: count
        in: query
        description: Specifies the desired maximum number of query results per page.
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Valid roles are found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/RolesListResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    post:
      tags:
      - Roles Endpoint
      summary: Create Role
      description: "This API creates a role and returns the details of the created\
        \ role including its unique ID.\n\n<b>Permission required:</b>\n    * /permission/admin/manage/identity/rolemgt/create\n\
        \    \n <b>Scope required:</b>\n    * internal_role_mgt_create\n    \n"
      operationId: createRole
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/RoleRequestObject'
        required: false
      responses:
        201:
          description: Valid role is created
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/RolePostResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        409:
          description: Role already exist
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErroRoleAlreadyAvailable'
      x-codegen-request-body-name: body
  /Roles/.search:
    post:
      tags:
      - Roles Endpoint
      summary: Search Roles
      description: "This API returns roles according to the specified filter, sort\
        \ and pagination parameters.\n\n<b>Permission required:</b>\n    * /permission/admin/manage/identity/rolemgt/view\n\
        \    \n<b>Scope required:</b>\n    * internal_role_mgt_view\n    \n"
      operationId: getRolesByPost
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/RoleSearchRequestObject'
        required: false
      responses:
        200:
          description: Valid roles are found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/RoleSearchResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
      x-codegen-request-body-name: body
  /Roles/{id}:
    get:
      tags:
      - Roles Endpoint
      summary: Get Role by ID
      description: "This API returns the role details of a particular role using its\
        \ unique ID.\n\n<b>Permission required:</b>\n    * /permission/admin/manage/identity/rolemgt/view\n\
        \n<b>Scope required:</b>\n    * internal_role_mgt_view\n    \n"
      operationId: getRolebyId
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        description: SCIM defined attributes parameter.
        schema:
          type: string
      - name: excludedAttributes
        in: query
        description: SCIM defined excludedAttribute parameter.
        schema:
          type: string
      responses:
        200:
          description: Valid role is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/RoleGetResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    put:
      tags:
      - Roles Endpoint
      summary: Update Role - PUT
      description: "This API updates the role details and returns the updated role\
        \ details using a PUT operation.\n\n<b>Permission required:</b>\n    * /permission/admin/manage/identity/rolemgt/update\n\
        \    \n<b>Scope required:</b>\n    * internal_role_mgt_update\n    \n"
      operationId: updateRole
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/RolePutRequestObject'
        required: false
      responses:
        200:
          description: Role is updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/RolePutResponseObject'
        400:
          description: Invalid Input
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorInvalidInput'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        406:
          description: Not Acceptable
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorNotAcceptable'
      x-codegen-request-body-name: body
    delete:
      tags:
      - Roles Endpoint
      summary: Delete Role
      description: "This API deletes a particular role using its unique ID.\n\n<b>Permission\
        \ required:</b>\n    * /permission/admin/manage/identity/rolemgt/delete\n\n\
        <b>Scope required:</b>\n    * internal_role_mgt_delete\n    \n"
      operationId: deleteRole
      parameters:
      - name: id
        in: path
        description: Unique ID of the resource type.
        required: true
        schema:
          type: string
      responses:
        204:
          description: Role is deleted
          content: {}
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
    patch:
      tags:
      - Roles Endpoint
      summary: Update Role - PATCH
      description: "This API updates the role details and returns the updated role\
        \ details using a PATCH operation.\n\n<b>Permission required:</b>\n    * /permission/admin/manage/identity/rolemgt/update\n\
        \n<b>Scope required:</b>\n    * internal_role_mgt_update\n    \n"
      operationId: patchRole
      parameters:
      - name: id
        in: path
        description: Unique id of the resource type.
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchRoleOperationRequestObject'
        required: false
      responses:
        200:
          description: Role is updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/PatchRoleOperationResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        406:
          description: Not Acceptable
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorNotAcceptable'
      x-codegen-request-body-name: body
  /Bulk:
    post:
      tags:
      - Bulk Endpoint
      summary: Create/ Update/ Delete SCIM Resources (Users/ Groups/ Roles) in Bulk
      description: |
        This API is used to create/update/replace/delete SCIM resources in bulk. You need to specify different operations in the request payload corresponding to the type of bulk update: </br>
          - **POST** operation: Adds new resources.
          - **PUT** operation: Replaces an existing resource.
          - **PATCH** opearation: Updates attribues of an existing resource.
          - **DELETE** operation: Removes an existing resource.
        Learn more about [defining batch operations](../scim2-batch-operations).
        
         <b>Permission required:</b>
         * /permission/admin/manage/identity/usermgt
         
         <b>Scope required:</b>
            * internal_user_mgt_create
      operationId: createBulkUsers
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/BulkUserRequestObject'
        required: false
      responses:
        201:
          description: Valid user is created
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/BulkUserResponseObject'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
        403:
          description: Forbidden
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorForbidden'
        409:
          description: Users already exists
          content: {}
      x-codegen-request-body-name: body
  /ResourceTypes:
    get:
      tags:
      - ResourceType Endpoint
      summary: Get Resource Types
      description: |
        This API lists and returns metadata about resource types.
      operationId: getResourceType
      responses:
        200:
          description: Schema is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ResourceTypeResponse'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
  /ServiceProviderConfig:
    get:
      tags:
      - ServiceProviderConfig Endpoint
      summary: Get Service Provider Config
      description: |
        This API returns the service provider's configuration details.

        <b>Permission required:</b>
        * No permissions required
      operationId: getServiceProviderConfig
      responses:
        200:
          description: Schema is found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/SPConfigResponse'
        401:
          description: Unauthorized
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/ErrorUnauthorized'
components:
  schemas:
    UserObject:
      required:
      - password
      type: object
      properties:
        schemas:
          type: object
          properties: {}
          example: []
        name:
          type: object
          properties:
            givenName:
              type: string
              example: Kim
            familyName:
              type: string
              example: Berry
        userName:
          type: string
          example: kim
        password:
          type: string
          example: abc123
        emails:
          type: array
          example:
          - type: home
            value: kim@gmail.com
            primary: true
          - type: work
            value: kim@wso2.com
          items:
            type: object
            properties: {}
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          type: object
          properties:
            employeeNumber:
              type: string
              example: 1234A
            manager:
              type: object
              properties:
                value:
                  type: string
                  example: Taylor
    UserResponseObject:
      required:
      - meta
      type: object
      properties:
        meta:
          type: object
          properties:
            created:
              type: string
              example: 2018-08-17T10:34:29Z
            location:
              type: string
              example: https://localhost:9443/scim2/Users/008bba85-451d-414b-87de-c03b5a1f4217
            lastModified:
              type: string
              example: 2018-08-17T10:34:29Z
            resourceType:
              type: string
              example: User
        schemas:
          type: object
          properties: {}
          example:
          - urn:ietf:params:scim:schemas:core:2.0:User
          - urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
        username:
          type: string
          example: PRIMARY/kim
        id:
          type: string
          example: 008bba85-451d-414b-87de-c03b5a1f4217
        name:
          type: object
          properties:
            givenName:
              type: string
              example: Kim
            familyName:
              type: string
              example: Berry
        emails:
          type: array
          example:
          - type: home
            value: kim@gmail.com
            primary: true
          - type: work
            value: kim@wso2.com
          items:
            type: object
            properties: {}
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          type: object
          properties:
            employeeNumber:
              type: string
              example: 1234A
            manager:
              type: object
              properties:
                value:
                  type: string
                  example: Taylor
        roles:
          type: object
          properties: {}
          example:
          - type: default
            value: Internal/everyone
    UserUpdateObject:
      type: object
      properties:
        schemas:
          type: object
          properties: {}
          example: []
        name:
          type: object
          properties:
            givenName:
              type: string
              example: Kim
            familyName:
              type: string
              example: Berry
        userName:
          type: string
          example: kim
        emails:
          type: array
          example:
          - type: home
            value: kim@gmail.com
            primary: true
          - type: work
            value: kim@wso2.com
          items:
            type: object
            properties: {}
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          type: object
          properties:
            employeeNumber:
              type: string
              example: 1234A
            manager:
              type: object
              properties:
                value:
                  type: string
                  example: Taylor
    PatchOpperationInput:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: object
            example: urn:ietf:params:scim:api:messages:2.0:PatchOp
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/OperationMeItem'
    OperationMeItem:
      type: object
      properties:
        op:
          type: string
          enum:
          - add
          - remove
          - replace
        value:
          type: object
          properties:
            nickName:
              type: string
              example: shaggy
    PatchOperationResponseOutput:
      required:
      - meta
      type: object
      properties:
        meta:
          type: object
          properties:
            created:
              type: string
              example: 2018-08-17T10:34:29Z
            location:
              type: string
              example: https://localhost:9443/scim2/Users/008bba85-451d-414b-87de-c03b5a1f4217
            lastModified:
              type: string
              example: 2018-08-17T10:34:29Z
            resourceType:
              type: string
              example: User
        schemas:
          type: array
          items:
            type: string
            example: ""
        username:
          type: string
          example: kim
        id:
          type: string
          example: 008bba85-451d-414b-87de-c03b5a1f4217
        name:
          type: object
          properties:
            givenName:
              type: string
              example: Kim
            familyName:
              type: string
              example: Berry
        emails:
          type: array
          example:
          - type: home
            value: kim@gmail.com
            primary: true
          - type: work
            value: kim@wso2.com
          items:
            type: object
            properties: {}
        urn:ietf:params:scim:schemas:extension:enterprise:2.0:User:
          type: object
          properties:
            employeeNumber:
              type: string
              example: 1234A
            manager:
              type: object
              properties:
                value:
                  type: string
                  example: Taylor
        roles:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
              display:
                type: string
                example: loginRole
              value:
                type: string
                example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
        nickName:
          type: string
          example: shaggy
    GroupRequestObject:
      required:
      - displayName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:core:2.0:Group
        displayName:
          type: string
          example: manager
        members:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 008bba85-451d-414b-87de-c03b5a1f4217
              display: kim
    GroupResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: PRIMARY/manager
        meta:
          type: object
          properties:
            created:
              type: string
              example: 2019-08-26T14:27:36
            location:
              type: string
              example: https://localhost:9443/scim2/Groups/7bac6a86-1f21-4937-9fb1-5be4a93ef469
            lastModified:
              type: string
              example: 2019-08-26T14:27:36
            resourceType:
              type: string
              example: Group
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:core:2.0:Group
        id:
          type: string
          example: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        members:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Users/3a12bae9-4386-44be-befd-caf349297f45
              display:
                type: string
                example: kim
              value:
                type: string
                example: 008bba85-451d-414b-87de-c03b5a1f4217
        roles:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
              display:
                type: string
                example: loginRole
              value:
                type: string
                example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
    GroupsListResponseObject:
      type: object
      properties:
        totalResults:
          type: integer
          example: 3
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 3
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:ListResponse
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/groupOb'
    GroupSearchRequestObject:
      type: object
      properties:
        schemas:
          type: object
          properties: {}
          example:
          - urn:ietf:params:scim:api:messages:2.0:SearchRequest
        startIndex:
          type: integer
          example: 1
        filter:
          type: string
          example: displayName eq manager
    GroupSearchResponseObject:
      type: object
      properties:
        totalResults:
          type: integer
          example: 1
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 3
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:ListResponse
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/groupOb'
    groupOb:
      type: object
      properties:
        displayName:
          type: string
          example: PRIMARY/manager
        meta:
          type: object
          properties:
            created:
              type: string
              example: 2019-08-26T14:27:36
            location:
              type: string
              example: https://localhost:9443/scim2/Groups/7bac6a86-1f21-4937-9fb1-5be4a93ef469
            lastModified:
              type: string
              example: 2019-08-26T14:27:36
        members:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Users/3a12bae9-4386-44be-befd-caf349297f45
              display:
                type: string
                example: kim
              value:
                type: string
                example: 008bba85-451d-414b-87de-c03b5a1f4217
        roles:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
              display:
                type: string
                example: loginRole
              value:
                type: string
                example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
        id:
          type: string
          example: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
    GroupPutRequestObject:
      type: object
      properties:
        displayName:
          type: string
          example: manager
        members:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 409ca90b-2ba6-4474-9a45-2cf7376e6e43
              display: kris
    GroupPutResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: PRIMARY/manager
        meta:
          type: object
          properties:
            created:
              type: string
              example: 2019-08-26T14:27:36
            location:
              type: string
              example: https://localhost:9443/scim2/Groups/7bac6a86-1f21-4937-9fb1-5be4a93ef469
            lastModified:
              type: string
              example: 2019-08-26T14:27:36
            resourceType:
              type: string
              example: Group
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:core:2.0:Group
        id:
          type: string
          example: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        members:
          type: array
          items:
            type: object
            properties: {}
            example:
              display: kris
              value: 409ca90b-2ba6-4474-9a45-2cf7376e6e43
    PatchGroupOperationRequestObject:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:PatchOp
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/GroupItemObj'
    GroupItemObj:
      type: object
      properties:
        op:
          type: string
          enum:
          - add
          - remove
          - replace
        value:
          type: object
          properties:
            members:
              type: array
              items:
                type: object
                properties: {}
                example:
                  display: kris
                  value: 409ca90b-2ba6-4474-9a45-2cf7376e6e43
    PatchGroupOperationResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: PRIMARY/manager
        meta:
          type: object
          properties:
            created:
              type: string
              example: 2019-08-26T14:27:36
            location:
              type: string
              example: https://localhost:9443/scim2/Groups/7bac6a86-1f21-4937-9fb1-5be4a93ef469
            lastModified:
              type: string
              example: 2019-08-26T14:27:36
            resourceType:
              type: string
              example: Group
        schemas:
          type: object
          properties: {}
          example:
          - urn:ietf:params:scim:schemas:core:2.0:Group
        id:
          type: string
          example: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        members:
          type: array
          items:
            type: object
            properties: {}
            example:
            - display: kris
              value: 409ca90b-2ba6-4474-9a45-2cf7376e6e43
            - display: kim
              value: 007bfc66-e4f0-4d53-9dfd-0c4a77b33257
    UserObjectListResponseObject:
      type: object
      properties:
        totalResults:
          type: integer
          example: 1
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 1
        schemas:
          type: object
          properties: {}
          example:
          - urn:ietf:params:scim:api:messages:2.0:ListResponse
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseObject'
    UserSearchRequestObject:
      type: object
      example:
        schemas:
        - urn:ietf:params:scim:api:messages:2.0:SearchRequest
        attributes:
        - name.familyName
        - userName
        filter: userName sw ki and name.familyName co err
        domain: PRIMARY
        startIndex: 1
        count: 10
    RolesListResponseObject:
      type: object
      properties:
        totalResults:
          type: integer
          example: 3
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 3
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:ListResponse
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/RoleOb'
    RoleSearchRequestObject:
      type: object
      properties:
        schemas:
          type: object
          properties: {}
          example:
          - urn:ietf:params:scim:api:messages:2.0:SearchRequest
        startIndex:
          type: integer
          example: 1
        count:
          type: integer
          example: 10
        filter:
          type: string
          example: displayName eq loginRole
    RoleSearchResponseObject:
      type: object
      properties:
        totalResults:
          type: integer
          example: 1
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 3
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:ListResponse
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/RoleOb'
    RoleOb:
      type: object
      properties:
        displayName:
          type: string
          example: loginRole
        meta:
          type: object
          properties:
            location:
              type: string
              example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
        id:
          type: string
          example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
    RoleRequestObject:
      required:
      - displayName
      - schemas
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:extension:2.0:Role
        displayName:
          type: string
          example: loginRole
        users:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 008bba85-451d-414b-87de-c03b5a1f4217
        groups:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        permissions:
          type: array
          items:
            type: string
            example: /permission/admin/login
    RoleGetResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: loginRole
        meta:
          type: object
          properties:
            location:
              type: string
              example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
            resourceType:
              type: string
              example: Role
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:extension:2.0:Role
        id:
          type: string
          example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
        users:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Users/3a12bae9-4386-44be-befd-caf349297f45
              display:
                type: string
                example: kim
              value:
                type: string
                example: 008bba85-451d-414b-87de-c03b5a1f4217
        groups:
          type: array
          items:
            type: object
            properties:
              $ref:
                type: string
                example: https://localhost:9443/scim2/Groups/7bac6a86-1f21-4937-9fb1-5be4a93ef469
              display:
                type: string
                example: PRIMARY/manager
              value:
                type: string
                example: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        permissions:
          type: array
          items:
            type: string
            example: /permission/admin/login
    RolePostResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: loginRole
        meta:
          type: object
          properties:
            location:
              type: string
              example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
            resourceType:
              type: string
              example: Role
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:extension:2.0:Role
        id:
          type: string
          example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
    RolePutRequestObject:
      type: object
      properties:
        displayName:
          type: string
          example: loginRole
        users:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 409ca90b-2ba6-4474-9a45-2cf7376e6e43
        groups:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
        permissions:
          type: array
          items:
            type: string
            example: /permission/admin/manage/add
    RolePutResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: loginRole
        meta:
          type: object
          properties:
            location:
              type: string
              example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
            resourceType:
              type: string
              example: Role
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:extension:2.0:Role
        id:
          type: string
          example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
    PatchRoleOperationRequestObject:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:PatchOp
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/RoleItemAddGroupobj'
    RoleItemAddGroupobj:
      type: object
      properties:
        op:
          type: string
          enum:
          - add
          - remove
          - replace
        path:
          type: string
          example: groups
        value:
          type: array
          items:
            type: object
            properties: {}
            example:
              value: 7bac6a86-1f21-4937-9fb1-5be4a93ef469
    PatchRoleOperationResponseObject:
      type: object
      properties:
        displayName:
          type: string
          example: loginRole
        meta:
          type: object
          properties:
            location:
              type: string
              example: https://localhost:9443/scim2/Roles/4645709c-ea8c-4495-8590-e1fa0efe3de0
            resourceType:
              type: string
              example: Role
        schemas:
          type: object
          properties: {}
          example:
          - urn:ietf:params:scim:schemas:extension:2.0:Role
        id:
          type: string
          example: 4645709c-ea8c-4495-8590-e1fa0efe3de0
    BulkUserRequestObject:
      type: object
      properties:
        failOnErrors:
          type: integer
          example: 1
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:BulkRequest
        Operations:
          type: array
          items:
            $ref: '#/components/schemas/BulkUserOb'
    BulkUserOb:
      type: object
      properties:
        method:
          type: string
          example: POST
        path:
          type: string
          example: /Users
        bulkId:
          type: string
          example: ytrewq
        data:
          type: object
          properties:
            schemas:
              type: array
              items:
                type: string
                example: urn:ietf:params:scim:schemas:core:2.0:User
            username:
              type: string
              example: jesse
            password:
              type: string
              example: jesspass
    BulkUserResponseObject:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:api:messages:2.0:BulkResponse
        Operations:
          $ref: '#/components/schemas/OperationObBulk'
    OperationObBulk:
      type: object
      properties:
        bulkId:
          type: string
          example: qwerty
        method:
          type: string
          example: POST
        location:
          type: string
          example: https://localhost:9443/scim2/Users/81cbba1b-c259-485d-8ba4-79afb03e5bd1
        status:
          type: object
          properties:
            code:
              type: string
              example: "201"
    ResourceTypeResponse:
      type: object
      properties:
        schemas:
          type: array
          items:
            type: string
            example: urn:ietf:params:scim:schemas:core:2.0:ResourceType
        resourceType:
          type: array
          items:
            $ref: '#/components/schemas/UserObResourceType'
    UserObResourceType:
      type: object
      properties:
        schema:
          type: string
          example: urn:ietf:params:scim:schemas:core:2.0:User
        endpoint:
          type: string
          example: /Users
        meta:
          type: object
          properties:
            location:
              type: string
              example: https://localhost:9443/scim2/ResourceType/User
            resourceType:
              type: string
              example: ResourceType
        name:
          type: string
          example: User
        description:
          type: string
          example: User Account
        schemaExtensions:
          type: object
          properties:
            schema:
              type: string
              example: urn:ietf:params:scim:schemas:extension:enterprise:2.0:User
            required:
              type: boolean
              example: false
        id:
          type: string
          example: User
    SPConfigResponse:
      type: object
      example:
        patch:
          supported: true
        filter:
          maxResults: 200
          supported: true
        documentationUri: http://example.com/help/scim.html
        authenticationSchemes:
        - name: OAuth Bearer Token
          description: Authentication scheme using the OAuth Bearer Token Standard
          specUri: http://www.rfc-editor.org/info/rfc6750
          type: oauthbearertoken
          primary: true
        - name: HTTP Basic
          description: Authentication scheme using the HTTP Basic Standard
          specUri: http://www.rfc-editor.org/info/rfc2617
          type: httpbasic
          primary: false
        schemas:
        - urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig
        etag:
          supported: false
        sort:
          supported: false
        bulk:
          maxPayloadSize: 1048576
          maxOperations: 1000
          supported: true
        changePassword:
          supported: false
    ErrorInvalidInput:
      required:
      - detail
      - status
      type: object
      properties:
        status:
          type: string
          example: "400"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        scimType:
          type: string
          example: invalidSyntax
        detail:
          type: string
          example: Request is unparsable, syntactically incorrect, or violates schema.
    ErrorUnauthorized:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          example: "401"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        scimType:
          type: string
          example: Unauthorized
    ErrorNotAcceptable:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          example: "406"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        scimType:
          type: string
          example: Not Acceptable
    ErrorForbidden:
      required:
      - status
      type: object
      properties:
        status:
          type: string
          example: "403"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        scimType:
          type: string
          example: Forbidden
    GroupSearchErrorResponseObject:
      required:
      - itemsPerPage
      - schemas
      - startIndex
      - totalResults
      type: object
      properties:
        totalResults:
          type: integer
          example: 0
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 0
        schemas:
          type: array
          items:
            type: object
            example: urn:ietf:params:scim:api:messages:2.0:ListResponse
    ErroGroupAlreadyAvailable:
      required:
      - detail
      - status
      type: object
      properties:
        status:
          type: string
          example: "409"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        detail:
          type: string
          example: 'Group with name: PRIMARY/manager already exists in the system.'
    ErroRoleAlreadyAvailable:
      required:
      - detail
      - status
      type: object
      properties:
        status:
          type: string
          example: "409"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        detail:
          type: string
          example: 'Role with name: Internal/loginRole already exists in the system.'
    RoleSearchErrorResponseObject:
      required:
      - itemsPerPage
      - schemas
      - startIndex
      - totalResults
      type: object
      properties:
        totalResults:
          type: integer
          example: 0
        startIndex:
          type: integer
          example: 1
        itemsPerPage:
          type: integer
          example: 0
        schemas:
          type: array
          items:
            type: object
            example: urn:ietf:params:scim:api:messages:2.0:ListResponse
    ErrorInternalServerError:
      required:
      - detail
      - status
      type: object
      properties:
        status:
          type: string
          example: "500"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        detail:
          type: string
          example: Internal Server Error.
    ErrorNotimplemented:
      required:
      - detail
      - status
      type: object
      properties:
        status:
          type: string
          example: "501"
        schemas:
          type: string
          example: urn:ietf:params:scim:api:messages:2.0:Error
        detail:
          type: string
          example: Self delete is not supported.
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://localhost:9443/oauth/authorize
          tokenUrl: https://localhost:9443/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants read and write access to administrative information