swagger: '2.0'
info:
  description: This is the RESTful API for managing Sessions in WSO2 Identity Server
  version: 'v1'
  title: WSO2 Identity Server - Session Management API
  contact:
    name: 'WSO2 Identity Server'
    url: 'https://wso2.com/identity-and-access-management/'
    email: 'architecture@wso2.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

schemes:
 - https
host: localhost:9443
basePath: /t/carbon.super/api/users/v1

tags:
- name: me
  description: Operations for the authenticated user.

security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /me/sessions:
    get:
      tags:
        - me
      description: Retrieve information related to the active sessions of the logged in user.
      summary: get active sessions
      operationId: getSessionsOfLoggedInUser
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/limitQueryParam'
        - $ref: '#/parameters/offsetQueryParam'
        - $ref: '#/parameters/filterQueryParam'
        - $ref: '#/parameters/sortQueryParam'
      responses:
        200:
          description: Successfully retrieved session information
          schema:
            $ref: '#/definitions/Sessions'
        401:
            $ref: '#/responses/Unauthorized'
        404:
            $ref: '#/responses/NotFound'
        500:
            $ref: '#/responses/ServerError'

    delete:
      tags:
        - me
      description: Delete all the sessions of the logged in user
      summary: Terminate all sessions
      operationId: terminateSessionsByLoggedInUser
      responses:
        204:
          $ref: '#/responses/NoContent'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'

  /me/sessions/{session-id}:
    delete:
      tags:
        - me
      description: Terminate a given session of the logged in user
      summary: Terminate a session
      operationId: terminateSessionByLoggedInUser
      parameters:
        - $ref: '#/parameters/sessionIdPathParam'
      responses:
        204:
          $ref: '#/responses/NoContent'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'

#-----------------------------------------------------
# Descriptions of common responses
#-----------------------------------------------------
responses:
  NotFound:
    description: The specified resource is not found.
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized.
    schema:
      $ref: '#/definitions/Error'
  ServerError:
    description: Internal Server Error.
    schema:
      $ref: '#/definitions/Error'
  NotImplemented:
    description: Not Implemented.
    schema:
      $ref: '#/definitions/Error'
  InvalidInput:
    description: Invalid input request.
    schema:
      $ref: '#/definitions/Error'
  OK:
    description: OK.
  NoContent:
    description: No Content.

definitions:
  #-----------------------------------------------------
  # The Application Response object
  #-----------------------------------------------------
  Application:
    type: object
    required:
      - subject
      - appName
      - appId
    properties:
      subject:
        type: string
        description: Username for the application
        example: apiuser01
      appName:
        type: string
        description: Name of the application
        example: sampleApp
      appId:
        type: string
        description: ID of the application
        example: '012'

  #-----------------------------------------------------
  # The Session Response  object
  #-----------------------------------------------------
  Session:
    type: object
    properties:
      applications:
        type: array
        description: List of active applications in the session
        items:
          $ref: '#/definitions/Application'
      userAgent:
        type: string
        description: User agent of the session
        example: 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:15.0) Gecko/20100101 Firefox/15.0.1'
      ip:
        type: string
        description: IP address of the session
        example: '172.95.192.63'
      loginTime:
        type: string
        description: Login time of the session
        example: '1560412617'
      lastAccessTime:
        type: string
        description: Last access time of the session
        example: '1560416196'
      id:
        type: string
        description: ID of the session
        example: '8d9806d1-4efc-483e-a96a-a0fa77d4328b'

  #-----------------------------------------------------
  # The Sessions Response  object
  #-----------------------------------------------------
  Sessions:
    type: object
    required:
      - userId
    properties:
      userId:
        type: string
        example: '00000001'
      sessions:
        type: array
        description: List of active sessions
        items:
          $ref: '#/definitions/Session'

  #-----------------------------------------------------
  # Error  object
  #-----------------------------------------------------
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "AAA-00000"
      message:
        type: string
        example: "Some Error Message"
      description:
        type: string
        example: "Some Error Description"
      traceId:
        type: string
        example: "e0fbcfeb-3617-43c4-8dd0-7b7d38e13047"

#--------------------
# Parameters
#--------------------
parameters:
    limitQueryParam:
      in: query
      name: limit
      required: false
      description: maximum number of records to return
      type: integer
      format: int32
    offsetQueryParam:
      in: query
      name: offset
      required: false
      description: number of records to skip for pagination
      type: integer
      format: int32
    filterQueryParam:
      in: query
      name: filter
      required: false
      description: Condition to filter the retrival of records.
      type: string
    sortQueryParam:
      in: query
      name: sort
      required: false
      description: Define the order how the retrieved records should be sorted.
      type: string
    userIdPathParam:
      in: path
      name: user-id
      description: id of the user
      required: true
      type: string
    sessionIdPathParam:
      in: path
      name: session-id
      description: id of the session
      required: true
      type: string

#---------------------
# Security Definitions
#---------------------
securityDefinitions:
  BasicAuth:
    type: basic
  # ClientCertificate:
  #   type: custom
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth/authorize
    tokenUrl: https://localhost:9443/oauth/token
    scopes:
      read: Grants read access
      write: Grants write access
      admin: Grants read and write access to administrative information
