swagger: '2.0'
info:
  description: This is the RESTful API for managing challenge questions and answers of a user in WSO2 Identity Server
  version: "v1"
  title: WSO2 Identity Server - User's Challenge Questions and Answers API Definition.
  contact:
    name: "WSO2 Identity Server"
    url: "https://wso2.com/identity-and-access-management/"
    email: "architecture@wso2.com"
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

schemes:
 - https

# Tags are used for organizing operations
tags:
- name: me
  description: Operations for the authenticated user.
- name: admin
  description: >
    Operations available for privileged users, to be invoked on behalf of another user.

    **These endpoints are not released in WSO2 Identity Server - 5.9.0 version and will be released in the next product version.**

# Applicable authentication mechanisms
security:
  - OAuth2: []
  - BasicAuth: []

paths:
  /me/challenges:
    get:
      tags:
        - me
      summary: Retrieve challenges available for the authenticated user.
      operationId: getChallengesForLoggedInUser
      description: |
        Retrieves the available challenges in the system for the authenticated user. In the response challenge questions are grouped as **challenge set**s.

        <b>Permission required:</b>
         * /permission/admin/login
      parameters:
        - $ref: '#/parameters/limitQueryParam'
        - $ref: '#/parameters/offsetQueryParam'
      responses:
        200:
          description: All the available challenges in the system that can be answered by the user.
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          $ref: '#/responses/InvalidInput'
        403:
          $ref: '#/responses/Forbidden'
        401:
          $ref: '#/responses/Unauthorized'
        500:
          $ref: '#/responses/ServerError'
  /me/challenge-answers:
    post:
      tags:
        - me
      summary: Answer to a collection of new challenges.
      operationId: addChallengeAnswersForLoggedInUser
      description: |
        Provide answer(s) to one or more candidate challenge question set(s) available in the system for the authenticated user. A user can pick at maximum one question from each set to answer. A user may answer **one or more distinct** challenge question **set(s)**.

        <b>Permission required:</b>
         * /permission/admin/login
      parameters:
        - in: body
          name: challengeAnswer
          description: One or more challenge(s) with the answer.
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    get:
      tags:
        - me
      summary: Get user's answered challenges.
      operationId: getAnsweredChallengesOfLoggedInUser
      description: >
        Get previously answered challenge(s) in the system by the authenticated user.

          <b>Permission required:</b>
           * /permission/admin/login
      responses:
        200:
          description: Array of Challenge(s) that are already answered by the authenticated user.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserChallengeAnswerResponse'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - me
      summary: Answer new challenge question combination over existing answers.
      operationId: updateChallengeAnswersOfLoggedInUser
      description: |
        Overrides the *already answered challenges* in the system with a set of *new challenge question answers* for logged In user. A user can pick at maximum one question from each set to answer. A user may answer **one or more distinct** challenge question **sets**.

        <b>Permission required:</b>
         * /permission/admin/login
      parameters:
        - in: body
          name: challengeAnswers
          description: Set of challenges with answer.
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - me
      summary: Remove challenge question answers.
      operationId: deleteChallengeAnswersOfLoggedInUser
      description: |
        Removes all the existing challenge answers of the authenticated user.

        <b>Permission required:</b>
         * /permission/admin/login
      responses:
        204:
          $ref: '#/responses/NoContent'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /me/challenge-answers/{challenge-set-id}:
    post:
      tags:
        - me
      summary: Answers a specific new challenge.
      operationId: addChallengeAnswerOfLoggedInUser
      description: |
        Provide an **answer** to **a specific challenge** in the system for loggedin user. The user can at most select one question from a challenge set of interest.

        <b>Permission required:</b>
         * /permission/admin/login
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - in: body
          name: challengeAnswer
          description: The answer to the challenge along with the question.
          schema:
            $ref: '#/definitions/UserChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - me
      summary: Update challenge answer of an already answered challenge.
      operationId: updateChallengeAnswerOfLoggedInUser
      description: |
        Update challenge answer in a specific challenge for authenticated user.

        <b>Permission required:</b>
         * /permission/admin/login
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - in: body
          name: challenge-answer
          description: The challenge answer with the challenge-question.
          schema:
           $ref: '#/definitions/UserChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - me
      summary: Remove a challenge question answer.
      operationId: deleteChallengeAnswerOfLoggedInUser
      description: |
        Removes existing answer provided by the authenticated user to a specific challenge.

        <b>Permission required:</b>
         * /permission/admin/login
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
      responses:
        204:
          $ref: '#/responses/NoContent'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /{user-id}/challenges:
    get:
      tags:
        - admin
      summary: Retrieve challenges available for a user identified by the user-id.
      operationId: getChallengesForAUser
      description: |
        Retrieves the available challenges in the system for the specified user. In the response challenge questions are grouped as **challenge set**s.

        <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - $ref: '#/parameters/limitQueryParam'
        - $ref: '#/parameters/offsetQueryParam'
      responses:
        200:
          description:  >
            All the available challenges in the system that can be answered by the user.
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeSet'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /{user-id}/challenge-answers:
    post:
      tags:
        - admin
      summary: Answer to a collection of new challenges.
      operationId: addChallengeAnswersOfAUser
      description: >
        Provide answer(s) to one or more candidate challenge question set(s) available in the system for the user identified by user-id. A user can pick at maximum one question from each set to answer. A user may answer **one or more distinct** challenge question **set(s)**.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challenge-answer
          description: One or more challenge(s) with the answer.
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    get:
      tags:
        - admin
      summary: Get user's answered challenges.
      operationId: getAnsweredChallengesOfAUser
      description: |
        Get previously answered challenge(s) in the system by the user idenrified by user-id.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/usernamePathParams'

      responses:
        200:
          description: Array of Challenge(s) that are already answered by the authenticated user.
          schema:
            type: array
            items:
              $ref: '#/definitions/UserChallengeAnswerResponse'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - admin
      summary: Answer new challenge question combination over existing answers.
      operationId: updateChallengeAnswersOfAUser
      description: |
        Overrides the *already answered challenges* in the system with a set of *new challenge question answers* for the user identified by user-id. A user can pick at maximum one question from each set to answer. A user may answer **one or more distinct** challenge question **sets**.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challengeAnswers
          description: Set of challenges with answer.
          schema:
            type: array
            items:
              $ref: '#/definitions/ChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - admin
      summary: Remove challenge question answers.
      operationId: deleteChallengeAnswersOfAUser
      description: |
        Removes all the existing challenge answers of the user identified by user-id.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/usernamePathParams'
      responses:
        204:
          $ref: '#/responses/NoContent'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
  /{user-id}/challenge-answers/{challenge-set-id}:
    post:
      tags:
        - admin
      summary: Answers a specific new challenge.
      operationId: addChallengeAnswerOfAUser
      description: |
        Provide an **answer** to **a specific challenge** in the system for the user identified by user-id. The user can at most select one question from a challenge set of interest.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challengeAnswer
          description: The answer to the challenge along with the question.
          schema:
            $ref: '#/definitions/UserChallengeAnswer'
      responses:
        201:
          $ref: '#/responses/Created'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        409:
          $ref: '#/responses/Conflict'
        500:
          $ref: '#/responses/ServerError'
    put:
      tags:
        - admin
      summary: Update challenge answer of an already answered challenge.
      operationId: updateChallengeAnswerOfAUser
      description: |
        Update challenge answer in a specific challenge for authenticated user.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
        - in: body
          name: challengeAnswer
          description: The challenge answer with the challenge-question.
          schema:
            $ref: '#/definitions/UserChallengeAnswer'
      responses:
        200:
          $ref: '#/responses/OK'
        400:
          $ref: '#/responses/InvalidInput'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
    delete:
      tags:
        - admin
      summary: Remove a challenge question answer.
      operationId: deleteChallengeAnswerOfAUser
      description: |
        Removes existing answer provided by the user(identified by user-id) to a specific challenge.

          <b>Permission required:</b>
            * /permission/admin/manage/identity
      parameters:
        - $ref: '#/parameters/questionSetIdPathParam'
        - $ref: '#/parameters/usernamePathParams'
      responses:
        204:
          $ref: '#/responses/NoContent'
        401:
          $ref: '#/responses/Unauthorized'
        403:
          $ref: '#/responses/Forbidden'
        404:
          $ref: '#/responses/NotFound'
        500:
          $ref: '#/responses/ServerError'
parameters:
    usernamePathParams:
      in: path
      name: user-id
      required: true
      type: string
      description: Uniquely identifiable user ID
    questionSetIdPathParam:
      in: path
      name: challenge-set-id
      required: true
      type: string
      description: Challenge Question Set ID
    questionIdPathParam:
      in: path
      name: question-id
      required: true
      type: string
      description: Challenge Question ID
    localeQueryParam:
      in: query
      name: locale
      description: An optional search string for looking up challenge-questions based on locale
      required: false
      type: string
    offsetQueryParam:
      in: query
      name: offset
      description: Number of records to skip for pagination. _*This filtering is not yet supported._
      type: integer
      format: int32
      minimum: 0
    limitQueryParam:
      in: query
      name: limit
      description: Maximum number of records to return. _*This filtering is not yet supported._
      type: integer
      format: int32
      minimum: 0
definitions:
    #-----------------------------------------------------
    # ChallengeSet Properties object
    #-----------------------------------------------------
  ChallengeSet:
    type: object
    required:
      - challengeSetId
      - questions
    properties:
      questionSetId:
        type: string
        example: challengeQuestion1
        description: A unique ID for the challenge set.
      questions:
        type: array
        description: Challenge questions for the set.
        items:
          $ref: '#/definitions/ChallengeQuestion'
  #-----------------------------------------------------
  # ChallengeQuestion Properties object
  #-----------------------------------------------------
  ChallengeQuestion:
    type: object
    required:
      - question
    properties:
      locale:
        type: string
        example: en_US
        description: The locale of the question.
      question:
        type: string
        example: What is your favorite travel destination ?
        description: Challenge question display value.
      questionId:
        type: string
        example: question1
        description: A unique ID for the challenge quesion within the set.
  #-----------------------------------------------------
  # ChallengeAnswer Properties object
  #-----------------------------------------------------
  ChallengeAnswer:
    type: object
    required:
      - answer
      - challenge
    properties:
      questionSetId:
        type: string
        example: challengeQuestionSet1
        description: A unique ID to identify the challenge set.
      challengeQuestion:
          $ref: '#/definitions/ChallengeQuestion'
          description: A challenge question that is selected to answer from the set.
      answer:
        type: string
        example: Colombo
        description: Answer to the challenge question.
  #-----------------------------------------------------
  # UserChallengeAnswer Properties object
  #-----------------------------------------------------
  UserChallengeAnswer:
    type: object
    required:
      - answer
      - challenge
    properties:
      challengeQuestion:
          $ref: '#/definitions/ChallengeQuestion'
      answer:
        type: string
        example: Colombo
  #-----------------------------------------------------
  # UserChallengeAnswerResponse Properties object
  #-----------------------------------------------------
  UserChallengeAnswerResponse:
    type: object
    required:
      - answer
      - questionSetId
      - question
    properties:
      questionSetId:
        type: string
        example: challengeQuestionSet1
        description: A unique ID to identify the challenge set.
      question:
        type: string
        example: What is your favorite travel destination ?
        description: Challenge question display value.
      answer:
        type: string
        example: Ro83J+wm/zkUt2/6GDf+xZD8s/2pjPqTUhrkOrwGBb4=
        description: A hashed value of the challenge answer.
  #-----------------------------------------------------
  # The Error Response  object
  #-----------------------------------------------------
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "some_error_code"
      message:
        type: string
        example: "Some Error Message"
      description:
        type: string
        example: "Some Error Description"
      traceId:
        type: string
        example: "Some Correlation for Error Instance"
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth2/authorize
    tokenUrl: https://localhost:9443/oauth2/token
#-----------------------------------------------------
# Descriptions of common responses
#-----------------------------------------------------
responses:
  NotFound:
    description: The specified resource is not found
    schema:
      $ref: '#/definitions/Error'
  Unauthorized:
    description: Unauthorized
  ServerError:
    description: Internal Server Error
    schema:
      $ref: '#/definitions/Error'
  InvalidInput:
    description: Invalid input request
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: Element Already Exists
    schema:
      $ref: '#/definitions/Error'
  Created:
    description: Item Created
  OK:
    description: OK
  NoContent:
    description: No Content
  Forbidden:
    description: Resource Forbidden

host: localhost:9443
basePath: /t/{tenant-domain}/api/users/v1
