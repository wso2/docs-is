swagger: '2.0'
######################################################
# Prolog
######################################################
info:
  description: |
    This is the RESTful API for a user to manage his/her TOTP QR URLs/secrets in WSO2 Identity Server. Going forward this will be the API for user portal as well as external parties.
  version: "v1"
  title: "WSO2 Identity Server - TOTP API Definition"
  contact:
    name: "WSO2"
    url: "http://wso2.com/products/identity-server/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The schemes supported by the API
schemes:
  - https
# Applicable authentication mechanisms.
security:
  - OAuth2: []
  - BasicAuth: []

# Tags are used for organizing operations
tags:
- name: me
  description: Operations for the authenticated user.

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
# host: apis.is.com

# The base path of the API.
# Will be prefixed to all paths.

# if the tenant domain is carbon.super basepath can be /api/identity/user/v1.0 like this too.
# basePath: /t/{tenant-domain}/api/identity/v1.0

# The following media types can be passed as input in message bodies of the API.
# The actual media type must be specified in the Content-Type header field of the request.
# The default is json, i.e. the Content-Type header is not needed to
# be set, but supporting it serves extensibility.
consumes:
  - application/json

# The following media types may be passed as output in message bodies of the API.
# The media type(s) consumable by the requestor is specified in the Accept header field
# of the corresponding request.
# The actual media type returned will be specfied in the Content-Type header field
# of the of the response.
# The default of the Accept header is json, i.e. there is not needed to
# set the value, but supporting it serves extensibility.


produces:
  - application/json
paths:
  # Endpoint uses perform TOTP operations.
  /me/totp:
    post:
      description: |
        This API is used to perform following actions.
        * <b>INIT</b>- Generate TOTP QR code URL for the authenticated user
        * <b>REFRESH</b> - Refresh TOTP secret key of the authenticated user
        * <b>VALIDATE</b> - Validate the user entered verification code

         <b>Permission required:</b>
         * /permission/admin/login
      summary: |
        Refresh, validate the QR code URL
      parameters:
        -
          name: request
          in: body
          description:  Actions supported by the API. Actions can be INIT, VALIDATE or REFRESH
          required: true
          schema:
            $ref: '#/definitions/UserRequest'
      responses:
        200:
          description: TOTP secret successfully refreshed
        201:
          description: Created
          schema:
            $ref: '#/definitions/TOTPResponse'
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized
        403:
          description: Resource Forbidden
        409:
          description: Conflict
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
      tags:
        - me
    get:
      tags:
        - me
      summary: Retrieve the QR Code URL of the authenticated user.
      description: |
        This API is used to retrieve the QR code URL of the authenticated user.

          <b>Permission required:</b>

          * /permission/admin/login
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TOTPResponse'
        401:
          description: Unauthorized
        403:
          description: Resource Forbidden
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - me
      summary: Resets TOTP credentials of the authenticated user.
      description: |
        This API is used to delete TOTP credentials of the authenticated user.

          <b>Permission required:</b>

          * /permission/admin/login
      responses:
        200:
          description: Credentials deleted successfully
        401:
          description: Unauthorized
        403:
          description: Resource Forbidden
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
  /me/totp/secret:
    get:
      tags:
        - me
      summary: Retrieve the TOTP secret of the authenticated user.
      description: |
        This API is used to retrieve the TOTP secret of the authenticated user.

          <b>Permission required:</b>

          * /permission/admin/login
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TOTPSecretResponse'
        401:
          description: Unauthorized
        403:
          description: Resource Forbidden
        500:
          description: Server Error
          schema:
            $ref: '#/definitions/Error'
definitions:
  #-----------------------------------------------------
  # The Error Response  object
  #-----------------------------------------------------
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: string
        example: "some_error_code"
      message:
        type: string
        example: "Some Error Message"
      description:
        type: string
        example: "Some Error Description"
      traceId:
        type: string
        example: "Some Correlation for Error Instance"
  #-----------------------------------------------------
  # The User Request object
  #-----------------------------------------------------
  UserRequest:
    type: object
    required: [action]
    properties:
      action:
        type: string
        example: INIT
        enum: [INIT, REFRESH, VALIDATE]
      verificationCode:
        type: integer
        example: Verification code that need to be verified by the server
  #-----------------------------------------------------
  # TOTP Response object
  #-----------------------------------------------------
  TOTPResponse:
    type: object
    properties:
      qrCodeUrl:
        type: string
        description: QR Code URL for the authenticated user
      isValid:
        type: boolean
        description: Secret key of the authenticated user
  #-----------------------------------------------------
  # TOTP secret object
  #-----------------------------------------------------
  TOTPSecretResponse:
    type: object
    properties:
      secret:
        type: string
        description: Refreshed TOTP secret key of the authenticated user
securityDefinitions:
  BasicAuth:
    type: basic
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: https://localhost:9443/oauth2/authorize
    tokenUrl: https://localhost:9443/oauth2/token
# Added by API Auto Mocking Plugin
host: localhost:9443
basePath: /t/carbon.super/api/users/v1
