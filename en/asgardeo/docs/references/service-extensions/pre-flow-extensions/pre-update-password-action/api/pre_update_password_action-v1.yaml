openapi: 3.0.1
info:
  title: API contract for pre update password action
  description: This API defines the REST API contract for a service that implements logic to extend password update flow of Asgardeo.
  version: v1
security:
- BasicAuth: []
- BearerAuth: []
- ApiKeyAuth: []
- OAuth2: []
paths:
  /:
    post:
      summary: handle pre-update password events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody'
        required: true
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/FailedResponse'
              examples:
                successExample:
                  summary: Success response
                  value:
                    actionStatus: SUCCESS
                failedExample:
                  summary: Failed response
                  value:
                    actionStatus: FAILED
                    failureReason: password_compromised
                    failureDescription: "The provided password is compromised."
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                actionStatus: ERROR
                error: invalid_credential
                errorDescription: Expects the encrypted credential.
        "500":
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                actionStatus: ERROR
                error: server_error
                errorDescription: Failed to process the response
components:
  schemas:
    Event:
      type: object
      required:
        - initiatorType
        - action
        - tenant
        - user
        - userStore
      properties:
        initiatorType:
          type: string
          example: USER
          enum:
          - USER
          - ADMIN
          - APPLICATION
          description: This indicates whether the password update was initiated by an admin, a user, or an application.
        action:
          type: string
          example: RESET
          enum:
          - RESET
          - UPDATE
          - INVITE
          - REGISTER
          description: This indicates whether the password update was initiated over a password reset flow, update flow, or an invite flow.
        tenant:
          $ref: '#/components/schemas/Tenant'
        user:
          $ref: '#/components/schemas/User'
        userStore:
          $ref: '#/components/schemas/UserStore'
      description: Defines the context data related to the pre issue access token event that needs to be shared with the custom service to process and execute.
    Tenant:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique numeric identifier of the tenant.
          example: "2"
        name:
          type: string
          description: The domain name of the tenant.
          example: bar.com
      description: This property represents the tenant under which the token request is being processed.
    User:
      type: object
      required:
        - updatingCredential
      properties:
        id:
          type: string
          description: Defines the unique identifier of the user.
          example: e204849c-4ec2-41f1-8ff7-ec1ebff02821
        claims:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/SingleValuedClaim'
              - $ref: '#/components/schemas/MultiValuedClaim'
          description: Additional user claims configured in the pre update profile action to be shared with the external service at a profile update event.
          example:
          - uri: http://wso2.org/claims/identity/accountLocked
            value: "false"
          - uri: http://wso2.org/claims/username
            value: "bob@aol.com"
          - uri: http://wso2.org/claims/verifiedEmailAddresses
            value: ["bob@work.example.com"]
          - uri: http://wso2.org/claims/emailAddresses
            value: ["bob@work.example.com", "bob@personal.example.com"]
        groups:
          type: array
          description: Groups of the user
          example:
          - employee
          - manager
          items:
            type: string
        updatingCredential:
          oneOf:
            - $ref: '#/components/schemas/UnencryptedCredential'
            - $ref: '#/components/schemas/EncryptedCredential'
      description: Contains information about the user associated with the password update request.
    UnencryptedCredential:
      type: object
      required:
        - type
        - format
        - value
      properties:
        type:
          type: string
          enum:
          - PASSWORD
          description: Defines the credential type. 
        format:
          type: string
          example: HASH
          enum:
          - PLAIN_TEXT
          - HASH
          description: Defines the format the credential is shared.
        value:
          type: string
          example: cHRSHCjvmT
          description: Defines the value.
        additionalData:
          $ref: '#/components/schemas/AdditionalData'
    EncryptedCredential:
      type: string
      description: |
        Represents an encrypted credential using JSON Web Encryption (JWE).
        
        When a public key is configured for the pre-password update action, 
        the `updatingCredential` object is encrypted into a JWE string. 
        The payload of this JWE follows the structure of the `UnencryptedCredential` object.
    
        Example JWE representation:
        ```
        eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.OKOawDo13gRp2ojaHV7LFsQ.48V1_ALb6US04U3b.5eym8X3LNvUubV4Y0kH.XFBoMYUZodetZdvTiFvSkQ
        ```
    
        Decrypted Payload Example (UnencryptedCredential structure):
        ```
        {
          "type": "PASSWORD",
          "format": "HASH",
          "value": "cHRSHCjvmT",
          "additionalData": {
            "algorithm": "SHA256"
          }
        }
        ```
    
        This ensures secure transmission of the credential while allowing validation upon decryption.
      example: eyJhbGciOiJSU0EtT0FFUCIsImVuYyI6IkEyNTZHQ00ifQ.OKOawDo13gRp2ojaHV7LFsQ.48V1_ALb6US04U3b.5eym8X3LNvUubV4Y0kH.XFBoMYUZodetZdvTiFvSkQ
    SingleValuedClaim:
      required:
      - uri
      - value
      type: object
      properties:
        uri:
          type: string
          description: Identifier of the user claim being shared. Claim uri is defined in the 'http://wso2.org/claims' dialect.
          example: http://wso2.org/claims/emailaddress
        value:
          type: string
          description: Value of the single valued user claim in current profile.
          example: bob@olddomain.com
      description: Defines the user claims that are configured to be shared with the external service during profile update flow.
    MultiValuedClaim:
      required:
      - uri
      - value
      type: object
      properties:
        uri:
          type: string
          description: Identifier of the user claim being shared. Claim uri is defined in the 'http://wso2.org/claims' dialect.
          example: http://wso2.org/claims/emailAddresses
        value:
          type: array
          description: Values of the multi valued user claim in current profile. 
          example: bob@olddomain.com
          items:
            type: string
      description: Defines the user claims that are configured to be shared with the external service during profile update flow.
    UserStore:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The unique identifier for the user store.
          example: UFJJTUFSWQ==
        name:
          type: string
          description: "User store name used to identify the user store in configuration settings, user interfaces, and administrative tasks."
          example: PRIMARY
      description: Indicates the user store in which the user's data is being managed.
    AdditionalData:
      type: object
      description: Defines the additional data related to the updating credential.
      anyOf:
      - $ref: '#/components/schemas/AdditionalDataForHashedPassword'
    AdditionalDataForHashedPassword:
      type: object
      properties:
        algorithm:
          type: string
          enum:
          - SHA256
      description: Defines additional data related to hashed passwords.
    SuccessResponse:
      type: object
      required:
        - actionStatus
      properties:
        actionStatus:
          type: string
          enum:
          - SUCCESS
      description: Defines the success response.
    FailedResponse:
      type: object
      required:
        - actionStatus
        - failureReason
        - failureDescription
      properties:
        actionStatus:
          type: string
          enum:
          - FAILED
          description: Indicates the outcome of the request. For a failed operation, this should be set to FAILED.
        failureReason:
          type: string
          description: Provides the reason for failing password update.
        failureDescription:
          type: string
          description: Offers a detailed explanation of the failure
    ErrorResponse:
      type: object
      required:
        - actionStatus
        - errorMessage
        - errorDescription
      properties:
        actionStatus:
          type: string
          enum:
          - ERROR
          description: Indicates the outcome of the request. For an error operation, this should be set to ERROR.
        errorMessage:
          type: string
          description: The cause of the error.
        errorDescription:
          type: string
          description: A detailed description of the error.
      description: |
         When the external service responds with an ERROR state, it can return an HTTP status code of 400, 401, or 500, indicating either a validation failure or an issue processing the request. 
    RequestBody:
      type: object
      required:
        - actionType
        - event
      properties:
        flowId:
          type: string
          description: A unique identifier that associates with the password updating flow in Asgardeo
          example: Ec1wMjmiG8
        requestId:
          type: string
          description: A unique correlation identifier that associates with the password update request received by Asgardeo
          example: 6783a180f817075313ea3fb01d79c221
        actionType:
          type: string
          description: "Specifies the action being triggered, which in this case is PRE_UPDATE_PASSWORD."
          enum:
          - PRE_UPDATE_PASSWORD
        event:
          $ref: '#/components/schemas/Event'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            process: process request generate response
